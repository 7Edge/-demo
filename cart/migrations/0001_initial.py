# Generated by Django 2.1.7 on 2019-03-25 14:22

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='课程类型')),
            ],
            options={
                'verbose_name_plural': '01. 课程大表',
            },
        ),
        migrations.CreateModel(
            name='CourseSubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='子课程类型')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cart.CourseCategory', verbose_name='所属大分类')),
            ],
            options={
                'verbose_name_plural': '02. 课程子表',
            },
        ),
        migrations.CreateModel(
            name='DegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='学位课程名')),
                ('course_img', models.CharField(max_length=255, verbose_name='课程示图')),
                ('brief', models.TextField(verbose_name='学位课程简介')),
                ('total_scholarship', models.PositiveIntegerField(default=40000, verbose_name='总奖学金(里贝)')),
                ('mentor_compensation_bonus', models.PositiveIntegerField(default=15000, verbose_name='本课程的导师辅导费用(里贝)')),
                ('period', models.PositiveIntegerField(default=150, verbose_name='建议学习周期（days)')),
                ('prerequisite', models.TextField(max_length=1024, verbose_name='课程先修要求')),
            ],
            options={
                'verbose_name_plural': '03. 学位课程表',
            },
        ),
        migrations.CreateModel(
            name='OftenAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='常见问题')),
                ('answer', models.CharField(max_length=255, verbose_name='答案')),
                ('object_id', models.IntegerField(help_text='多个表的对象主键', verbose_name='关联对象ID')),
                ('content_type', models.ForeignKey(help_text='外键引用ContentType的主键', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='所属表的类型')),
            ],
            options={
                'verbose_name_plural': '08. 常见问题表',
            },
        ),
        migrations.CreateModel(
            name='PricePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.PositiveSmallIntegerField(choices=[(1, '1天'), (3, '3天'), (7, '1周'), (14, '2周'), (30, '1个月'), (60, '2个月'), (90, '3个月'), (180, '6个月'), (210, '12个月'), (540, '18个月'), (720, '24个月')], verbose_name='学习周期')),
                ('price', models.FloatField()),
                ('object_id', models.IntegerField(verbose_name='课程对象')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='对应类型')),
            ],
            options={
                'verbose_name_plural': '13. 价格策略表',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='老师名')),
                ('role', models.SmallIntegerField(choices=[(0, '讲师'), (1, '导师')], default=0, verbose_name='老师角色')),
                ('title', models.CharField(max_length=64, verbose_name='职位/职称')),
                ('signature', models.CharField(blank=True, max_length=255, null=True, verbose_name='签名')),
                ('image', models.CharField(max_length=255, verbose_name='老师照片')),
                ('brief', models.CharField(max_length=1024, verbose_name='老师简介')),
            ],
            options={
                'verbose_name_plural': '04. 老师表',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=64, verbose_name='用户名')),
                ('pwd', models.CharField(max_length=64, verbose_name='密码')),
            ],
            options={
                'verbose_name_plural': '201. 学城用户表',
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=128, verbose_name='token')),
                ('expired', models.DateTimeField(auto_now_add=True, verbose_name='有效期')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cart.UserInfo', verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '202. 用户认证token表',
            },
        ),
        migrations.AddField(
            model_name='degreecourse',
            name='teachers',
            field=models.ManyToManyField(to='cart.Teacher', verbose_name='课程老师'),
        ),
        migrations.AlterUniqueTogether(
            name='pricepolicy',
            unique_together={('object_id', 'content_type', 'price')},
        ),
        migrations.AlterUniqueTogether(
            name='oftenaskedquestion',
            unique_together={('question', 'object_id', 'content_type')},
        ),
    ]
